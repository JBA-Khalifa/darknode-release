name: deploy
on:
    push:
        branches:
          - master

jobs:
    build:
        if: "!contains(github.event.head_commit.message, 'skipCI')"
        runs-on: ubuntu-latest
        steps:
            - name: Check out code
              uses: actions/checkout@v2
            - name: Parse the reference
              env:
                  ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
              run: |
                  cd $GITHUB_WORKSPACE
                  echo ::set-env name=REF::$(sed -n 's/^ref=//p' var.env)
                  echo ::set-env name=RELEASE::$(sed -n 's/^release=//p' var.env)
                  echo ::set-env name=PRERELEASE::$(sed -n 's/^prerelease=//p' var.env)
            - name: Configure git for private modules
              env:
                  TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
              run: git config --global url."https://tok-kkk:${TOKEN}@github.com".insteadOf "https://github.com"
            - name: Check out darknode with the reference
              uses: actions/checkout@v2
              with:
                  repository: renproject/darknode
                  token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
                  ref: ${{ env.REF }}
                  path: darknode
            - name: Build the binary
              run: |
                  cd darknode
                  MAIN_VERSION=$(cat ./VERSION | tr -d "[:space:]")
                  BRANCH=$(git branch | grep \* | cut -d ' ' -f2)
                  COMMIT_HASH=$(git describe --always --long)
                  FULL_VERSION=${MAIN_VERSION}-${BRANCH}-${COMMIT_HASH}
                  LDFLAGS="-s -w -X main.version=${FULL_VERSION}"
                  go build -o darknode-linux -ldflags="${LDFLAGS}" ./cmd/darknode
            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ env.RELEASE }}
                  release_name: ${{ env.RELEASE }}
                  draft: false
                  prerelease: ${{ env.PRERELEASE }}
            - name: Upload Release Asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: darknode/darknode-linux
                  asset_name: darknode
                  asset_content_type: application/octet-stream